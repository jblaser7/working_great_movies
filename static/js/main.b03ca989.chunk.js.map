{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","movie","name","rank","CardList","movies","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","this","filteredMovies","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAIaA,G,YAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,4BAAKD,EAAME,MAAMC,MACjB,2BAAIH,EAAME,MAAME,SCDXC,G,MAAW,SAAAL,GAAK,OACzB,yBAAKC,UAAU,aACVD,EAAMM,OAAOC,KAAI,SAAAL,GAAK,OACrB,kBAAC,EAAD,CAAMM,IAAKN,EAAMO,GAAIP,MAAOA,UCLzBQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,2BACIX,UAAU,SACVY,KAAK,SACLF,YAAcA,EACdG,SAAUF,MC2EHG,E,kDA9Eb,aAAe,IAAD,8BACZ,gBAsDJH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAtDpC,EAAKC,MAAQ,CACZf,OAAQ,CACN,CACEH,KAAM,UACNC,KAAK,EACLK,GAAG,GAEL,CACEN,KAAK,qBACLC,KAAK,EACLK,GAAG,GAGL,CACCN,KAAM,QACNC,KAAK,EACLK,GAAG,GAEJ,CACEN,KAAK,OACLC,KAAK,EACLK,GAAG,GAEL,CACEN,KAAM,qBACNC,KAAK,EACLK,GAAG,GAEL,CACEN,KAAK,UACLC,KAAK,EACLK,GAAG,GAEL,CACEN,KAAK,UACLC,KAAK,EACLK,GAAG,GAEL,CACEN,KAAM,kBACNC,KAAK,EACLK,GAAG,IAGPS,YAAY,IA9CD,E,qDA8DJ,IAAD,EAC6BI,KAAKD,MAA7Bf,EADL,EACKA,OAAQY,EADb,EACaA,YACVK,EAAiBjB,EAAOkB,QAAO,SAAAtB,GAAK,OACxCA,EAAMC,KAAKsB,cAAcC,SAASR,EAAYO,kBACpD,OACA,yBAAKxB,UAAU,OACb,6CACA,kBAAC,EAAD,CACEU,YAAY,gBACZC,aAAcU,KAAKV,eACrB,kBAAC,EAAD,CAAUN,OAAUiB,S,GAzERI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b03ca989.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <h2>{props.movie.name}</h2>\r\n        <p>{props.movie.rank}</p>\r\n    </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.movies.map(movie => (\r\n          <Card key={movie.id} movie={movie}/>\r\n        ))}\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n        className='search'\r\n        type='search' \r\n        placeholder= {placeholder}\r\n        onChange={handleChange}\r\n        />\r\n);\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n     movies: [\n       {\n         name: 'The fly',\n         rank:8,\n         id:1\n       },\n       {\n         name:'A clockwork orange',\n         rank:8,\n         id:2\n\n       },\n       {\n        name: 'Alien',\n        rank:8,\n        id:3\n       },\n       {\n         name:'Tron',\n         rank:9,\n         id:4\n       },\n       {\n         name: 'Back to the future',\n         rank:9,\n         id:5\n       },\n       {\n         name:'Robocop',\n         rank:8,\n         id:6\n       },\n       {\n         name:'contact',\n         rank:8,\n         id:7\n       },\n       {\n         name: 'minority report',\n         rank:8,\n         id:8\n       } \n     ],\n     searchField:''\n  };\n}\n\n/*componentDidMount(){\n    fetch('http://www.omdbapi.com/?apikey=[316cffe3]&t=Game of Thrones&Season=1&Episode=1') \n        .then(response=>console.log(response))\n}\n*/\nhandleChange = e => {\n  this.setState({ searchField: e.target.value })\n  }\n  \n//handleChange(e) {\n // this.setState({ searchField: e.target.value })\n//}\n  render() {\n        const { movies, searchField } = this.state;\n        const filteredMovies = movies.filter(movie =>\n          movie.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n    <div className=\"App\">\n      <h1>Search Movies</h1>\n      <SearchBox\n        placeholder='search movies'\n        handleChange={this.handleChange}/>\n      <CardList movies = {filteredMovies}/>\n    </div>\n    );\n  }\n}\n\nexport default App;\n/*\nconst fetchData = async(searchTerm) => {\n    const response = await axios.get('http://www.omdbapi.com', {\n        params: {\n            apikey:'316cffe3',\n            s: searchTerm\n        }\n    });\n    if(response.data.Error){\n       return []\n    }\n    return response.data.Search;\n};\n\nasync  fetchData(searchTerm) {\n     const response = await axios.get('https://jsonplaceholder.typicode.com/photos?albumId=1')\n\n\n\n\n    const fetchData = async(searchTerm) => {\n    const response = await axios.get('http://www.omdbapi.com', {\n        params: {\n            apikey:'316cffe3',\n            s: searchTerm\n        }\n    });\n    if(response.data.Error){\n       return []\n    }\n    return response.data.Search;\n};\n\n  const response = await axios.get('http://www.omdbapi.com/', {\n    params: {\n    apikey: '316cffe3',\n    i: movie.imdbID\n    }\n  });\n\n\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}